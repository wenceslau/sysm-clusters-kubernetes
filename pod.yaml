apiVersion: v1 #Explanation: This specifies the version of the Kubernetes API being used. In this case, v1 refers to the stable version of the API. Kubernetes objects like Pods, Services, and Deployments have different versions of their API definitions, and this tells Kubernetes which one you're using for this specific object.
kind: Pod #Explanation: This defines the kind of Kubernetes object you're creating. Here, you're creating a Pod, which is the smallest deployable unit in Kubernetes. A Pod encapsulates one or more containers.
metadata: #Explanation: This section contains metadata information about the Kubernetes object, such as the name, namespace, labels, and annotations.
  name: mypod #Explanation: This is the name of the Pod. In this case, the Pod is named mypod. The name is important because it’s used to reference and manage the Pod within the Kubernetes cluster.
spec: #Explanation: The spec (short for specification) defines the desired state of the object being created. For Pods, this typically includes the list of containers that should run inside the Pod, along with their configurations like images, ports, and other details.
  containers: #Explanation: This section defines the list of containers that will run in the Pod. Even though the Pod can contain multiple containers, in this example, only one container is defined.
    - name: web #Explanation: This gives the container a name (web). Each container in a Pod must have a unique name.
      image: kubedevio/web-color:blue #Explanation: This specifies the container image to use. In this case, the image is kubedevio/web-color, and the tag (or version) is blue. The image could be stored in a container registry (like Docker Hub or a private registry), and Kubernetes pulls this image when the Pod is created.
      ports: #Explanation: This defines a list of ports that the container will expose. This is important when you want to expose the application running inside the container to the outside world or to other components inside the cluster.
        - containerPort: 80 #Explanation: This specifies the container port that will be exposed. In this case, it’s port 80, which is the default HTTP port. The application running inside the container will listen on this port.
          name: http #Explanation: This assigns a name (http) to the port. This is useful for identifying the port, especially when multiple ports are defined, or if you are using protocols like HTTP or HTTPS.
          protocol: TCP #Explanation: This specifies the protocol used on the port. In this case, it's TCP (Transmission Control Protocol), which is the most common protocol for network communication.
